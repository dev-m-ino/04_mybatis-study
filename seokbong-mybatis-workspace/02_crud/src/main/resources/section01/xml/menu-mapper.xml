<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MenuMapper"> <!--namespace : Mapper파일을 식별하기위한 이름-->

    <!--
    ## Mapper 파일 작성 ##

    *  주요 태그 종류
    1. <select> : select문 작성
    2. <insert> : insert문 작성
    3. <update> : update문 작성
    4. <delete> : delete문 작성
    5. <resultMap> : 조회된 한 행을 매핑시킬 타입 지정
                     주로 DTO에 매핑시킬때 사용

    *  주요 속성 종류
    1. id : 해당 sql문의 식별자 (필수)
    2. parameterType : 해당 sql문으로 전달되는 파라미터 타입 (선택)
        ex) parameterType="_int"
            parameterType="string"
            parameterType="map"
            parameterType="com.kangbroo.model.dto.MenuDto" (Alias 미등록시)
            parameterType="MenuDto" (Alias 등록시)
    3. resultType : select문 실행 결과 한 row에 대한 타입 (dml문일 경우 미작성)
        ex) 위의 parameterType과 유사
    4. resultMap  : select문 실행 결과 한 row에 대해 어떤 resultMap을 참조시킬껀지 resultMap의 id작성 (dml문일 경우 미작성)

    *  주요 MyBatis 내장 별칭
         자바   |   마이바티스
       ========================
         int    |    _int
        String  |   string
         List   |    list
         Map    |     map

    *  파라미터 바인딩 (#{}, ${})
       만일 sql문으로 전달된 데이터가 있을 경우 파라미터 설정하기

    1. #{} : ?와 같은 역할을 수행하며 내부적으로 PreparedStatement 방식으로 값 처리함
             해당 값의 타입에 맞춰 값이 바인딩됨

           case 1. code 변수(10)에 숫자가 담겨 넘어올 경우  => #{변수}
                    #{code}  ==  10
           case 2. Map{name:"홍길동", age:17}이 넘어올 경우 => #{키}
                    #{name}  ==  '홍길동'
                    #{age}   ==  17
           case 3. MenuDto{menuCode:12, menuName:"음식"} 이 넘어올 경우 => #{필드}
                    #{menuCode} == 12
                    #{menuName} == '음식'

    2. ${} : sql문의 메타데이터(테이블명, 컬럼명, sql자체)를 처리할 때 사용함
             실제 데이터 값을 바인딩할 때 사용하면 SQL Injection에 취약함

            ex) Map{tableName:"tbl_menu", columnName:"menu_name"} 이 넘어올 경우
                    SELECT * FROM ${tableName} WHERE ${columnName} = '열무'
                    => SELECT * FROM tbl_menu WHERE menu_name = '열무'   로 완성됨

-->
    <insert id="insertMenu" parameterType="com.jjanggu.dto.MenuDto">
        INSERT INTO
            tbl_menu
            (
              menu_name
            , menu_price
            , category_code
            , orderable_status
            )
        VALUES
            (
              #{menuName}
            , #{menuPrice}
            , #{categoryCode}
            , #{orderableStatus}
            )
    </insert>

    <update id="updateMenu" parameterType="com.jjanggu.dto.MenuDto">
        UPDATE
            tbl_menu
        SET
            menu_name = #{menuName}
          , menu_price = #{menuPrice}
          , category_code = #{categoryCode}
        WHERE
            menu_code = #{menuCode}
    </update>

    <delete id="deleteMenu" parameterType="_int">
        DELETE
        FROM tbl_menu
        WHERE
            menu_code = #{code}
    </delete>

    <!--한 row에 대한 결과를 매핑시킬 타입 == java.lang.String -->
    <select id="selectMenuNameList" resultType="java.lang.String">
        SELECT
            menu_name
        FROM
            tbl_menu
    </select>

    <!-- 한 row에 대한 결과를 매핑시킬 타입 : MenuDto -->
    <!--
        case 1:  resultType = MenuDto
            조회되는 컬럼명이 매핑시킬 MenuDto의 필드명과 일치해야됨 (그래야 자동으로 매핑됨)
            조회되는 컬럼명이 필드명과 다를 경우
            별칭을 부여해서 컬럼의 헤더가 필드명으로 조회되도록 해야됨
    -->
    <!--
    <select id="selectOrderableMenuList" resultType="com.jjanggu.dto.MenuDto">
        SELECT
            menu_code         AS menuCode
          , menu_name         AS menuName
          , menu_price        AS menuPrice
          , category_code     AS categoryCode
          , orderable_status  AS orderableStatus
        FROM
            tbl_menu
        WHERE
            orderable_status = 'Y'
    </select>
    단점 : 매번 메뉴에 대해 조회할 때 마다 별칭 지정해야됨
    -->

    <!--
        case 2: resultMap 사용 방식
            특정 컬럼값을 특정 필드에 매핑시키는 resultMap을 한번 정의해두고 재사용하기
            <resultMap id="식별자" type="매핑시킬DTO타입">
                <id|result column="조회되는컬럼명" property="매핑시킬DTO의필드명"  />
            </resultMap>
    -->
    <resultMap id="menuResultMap" type="com.jjanggu.dto.MenuDto">
        <id column="menu_code" property="menuCode"/>
        <result column="menu_name" property="menuName"/>
        <result column="menu_price" property="menuPrice"/>
        <result column="category_code" property="categoryCode"/>
        <result column="orderable_status" property="orderableStatus"/>
    </resultMap>

    <select id="selectOrderableMenuList" resultMap="menuResultMap">
        SELECT
            menu_code
          , menu_name
          , menu_price
          , category_code
          , orderable_status
        FROM
            tbl_menu
        WHERE
            orderable_status = 'Y'
    </select>

    <select id="selectOrderableMenuCount" resultType="_int">
        SELECT
            COUNT(*)
        FROM
            tbl_menu
        WHERE
            orderable_status ='Y'
    </select>

    <select id="selectMenuByCode" parameterType="_int" resultMap="menuResultMap">
        SELECT
            menu_code
          , menu_name
          , menu_price
          , category_code
          , orderable_status
        FROM
            tbl_menu
        WHERE
            orderable_status = 'Y'
        AND menu_code = #{code}
    </select>




</mapper>